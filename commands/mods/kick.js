const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require("discord.js");

module.exports = {
	data: new SlashCommandBuilder()
		.setName('kick')
		.setDescription('Expulser un utilisateur du serveur')
		.addUserOption(option =>
			option.setName('user')
				.setDescription('Utilisateur √† expulser')
				.setRequired(true))
		.addStringOption(option =>
			option.setName('reason')
				.setDescription('Raison de l\'expulsion')
				.setRequired(false))
		.setDefaultMemberPermissions(PermissionFlagsBits.KickMembers),

	async execute(interaction, client) {
		// Diff√©rer la r√©ponse imm√©diatement pour √©viter les erreurs de d√©lai d'attente
		await interaction.deferReply();
		
		try {
			const user = interaction.options.getUser('user');
			const reason = interaction.options.getString('reason') || 'Aucune raison fournie';
			
			// R√©cup√©rer le membre √† partir de l'utilisateur
			const member = interaction.guild.members.cache.get(user.id);
			
			// V√©rifier si le membre existe et peut √™tre expuls√©
			if (!member) {
				return interaction.editReply({
					embeds: [
						new EmbedBuilder()
							.setColor('#8B0000')
							.setTitle('‚ùå Erreur')
							.setDescription(`Impossible de trouver l'utilisateur ${user.tag} sur ce serveur.`)
							.setTimestamp()
					]
				});
			}
			
			// V√©rifier si le bot a la permission d'expulser
			if (!interaction.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers)) {
				return interaction.editReply({
					embeds: [
						new EmbedBuilder()
							.setColor('#8B0000')
							.setTitle('‚ùå Erreur de permission')
							.setDescription(`Je n'ai pas la permission d'expulser des membres.`)
							.setTimestamp()
					]
				});
			}
			
			// V√©rifier si le membre peut √™tre expuls√© (hi√©rarchie des r√¥les)
			if (!member.kickable) {
				return interaction.editReply({
					embeds: [
						new EmbedBuilder()
							.setColor('#8B0000')
							.setTitle('‚ùå Erreur')
							.setDescription(`Je ne peux pas expulser ${user.tag}. V√©rifiez la hi√©rarchie des r√¥les.`)
							.setTimestamp()
					]
				});
			}
			
			// Expulser le membre
			await member.kick(reason);
			
			// R√©pondre avec succ√®s
			const embed = new EmbedBuilder()
				.setColor('#8B0000')
				.setTitle('üë¢ Expulsion')
				.setDescription(`L'utilisateur ${user} a √©t√© expuls√©.\nRaison : ${reason}`)
				.setTimestamp();
			
			await interaction.editReply({ embeds: [embed] });
		} catch (error) {
			console.error(`Erreur lors de l'expulsion:`, error);
			
			// R√©pondre avec l'erreur
			await interaction.editReply({
				embeds: [
					new EmbedBuilder()
						.setColor('#8B0000')
						.setTitle('‚ùå Erreur')
						.setDescription(`Une erreur est survenue lors de l'expulsion: ${error.message}`)
						.setTimestamp()
				]
			});
		}
	}
};
